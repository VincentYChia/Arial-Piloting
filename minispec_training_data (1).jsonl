{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno bottle instance in the scene, so we use scan to find bottle, then go and use object_height to get the height and log to output the height, finally use picture to take a picture of the bottle\n\nGenerate the MiniSpec program:", "completion": "?s('bottle')==True{g('bottle');_2=oh('bottle');l(_2);tp};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nthere is an apple instance in the scene, move towards it with conservative distance\n\nGenerate the MiniSpec program:", "completion": "mf(25);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nthere is an apple instance in the scene, we just go to the apple_5\n\nGenerate the MiniSpec program:", "completion": "g('apple_5');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nturn left 90 degrees, then use is_visible to check whether there is an apple on your left\n\nGenerate the MiniSpec program:", "completion": "tu(90);?iv('apple')==True&iv('orange'){l('Yes');->True}l('No');->False;"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nturn left 90 degrees, then use is_visible to check whether there is an apple on your left\n\nGenerate the MiniSpec program:", "completion": "tu(90);?iv('apple')==True&iv('orange'){l('Yes');->True}l('No');->False;"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nthe chair is not the target because we want the one behind you. So we turn 180 degrees then go to the general object chair, since chair is a large object, we use 80cm as the distance.\n\nGenerate the MiniSpec program:", "completion": "tc(180);g('chair');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nthe chair_13 is not the target because we want the one behind you. So we turn 180 degrees then go to the general object chair, since chair is a large object, we use 80cm as the distance.\n\nGenerate the MiniSpec program:", "completion": "tc(180);g('chair');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nedible object is abstract and there is no edible object in the scene, so we use scan_abstract to find the edible object\n\nGenerate the MiniSpec program:", "completion": "_1=sa('Any edible target here?');?_1!=False{g(_1)};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nedible object is abstract and there is no edible object in the scene, so we use scan_abstract to find the edible object\n\nGenerate the MiniSpec program:", "completion": "_1=sa('Any edible target here?');?_1!=False{g(_1)};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nwe use loop and probe to find animal\n\nGenerate the MiniSpec program:", "completion": "12{_1=p('Any animal target here?');?_1!=False{l(_1);->True}tc(30)}->False;"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nwe use loop and probe to find animal\n\nGenerate the MiniSpec program:", "completion": "12{_1=p('Any animal target here?');?_1!=False{l(_1);->True}tc(30)}->False;"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nFrom the scene, we can see a chair, so we use scan to find a person. Since person is a large object, we use 60cm as the distance\n\nGenerate the MiniSpec program:", "completion": "?s('person')==True{g('person');->True}->False;"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nFrom the scene, we can see a chair, so we use scan to find a person. Since person is a large object, we use 60cm as the distance\n\nGenerate the MiniSpec program:", "completion": "_1=s('person');?_1==True{g('person');->True}->False;"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nThe task is too vague, so we use log to output the advice\n\nGenerate the MiniSpec program:", "completion": "l('Please give me more information.');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nThe task is too vague, so we use log to output the advice\n\nGenerate the MiniSpec program:", "completion": "l('Please give me more information.');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nThere are two chairs, the second one is closer to the book, so we go to the second chair\n\nGenerate the MiniSpec program:", "completion": "g('chair');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nfrom the scene, we tell directly that the right apple is the biggest apple\n\nGenerate the MiniSpec program:", "completion": "g('apple');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nfrom the scene, we tell directly that apple_2 is the biggest apple\n\nGenerate the MiniSpec program:", "completion": "g('apple_2');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nUsing scan abstract to find the chair with a laptop on it\n\nGenerate the MiniSpec program:", "completion": "_1=sa('Any chair with a laptop on it?');?_1!=False{g(_1)};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nThere is a sports ball in the scene, so we follow it for 17 seconds using simple goto and delay pattern, repeating every 0.2 seconds for smooth following\n\nGenerate the MiniSpec program:", "completion": "85{?time()>17{->True};g('sports ball');d(0.2)}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nThe second chair (on the right) is closer to the book\n\nGenerate the MiniSpec program:", "completion": "l('the right chair');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nGo forward, then turn 135 degrees to the left, finally go forward again.\n\nGenerate the MiniSpec program:", "completion": "mf(100);tu(135);mf(100);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nafter turning around, we will do replan. We found that the chair is blocking the apple, so we use moving_up to get over the chair and then go to the apple\n\nGenerate the MiniSpec program:", "completion": "mu(40);g('apple');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno laptop instance in the scene, so we use scan to find laptop, then go and use object_width to get the width and log to output the width\n\nGenerate the MiniSpec program:", "completion": "?s('laptop')==True{g('laptop');_2=ow('laptop');l(_2)};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nthere is a book instance in the scene, move towards it with conservative approach\n\nGenerate the MiniSpec program:", "completion": "mf(30);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nthere is an orange instance in the scene, we just go to the orange_7\n\nGenerate the MiniSpec program:", "completion": "g('orange_7');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nturn right 90 degrees, then use is_visible to check whether there is a book and a pen on your right\n\nGenerate the MiniSpec program:", "completion": "tc(90);?iv('book')==True&iv('pen'){l('Yes');->True}l('No');->False;"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nturn right 90 degrees, then use is_visible to check whether there is a bottle and a cup on your right\n\nGenerate the MiniSpec program:", "completion": "tc(90);?iv('bottle')==True&iv('cup'){l('Yes');->True}l('No');->False;"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nthe table is not the target because we want the one behind you. So we turn 180 degrees then go to the general object table, since table is a large object, we use 80cm as the distance.\n\nGenerate the MiniSpec program:", "completion": "tc(180);g('table');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nthe table_8 is not the target because we want the one behind you. So we turn 180 degrees then go to the general object table, since table is a large object, we use 80cm as the distance.\n\nGenerate the MiniSpec program:", "completion": "tc(180);g('table');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nliquid container is abstract and there is no liquid container in the scene, so we use scan_abstract to find the liquid container\n\nGenerate the MiniSpec program:", "completion": "_1=sa('Any liquid container here?');?_1!=False{g(_1)};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nliquid container is abstract and there is no liquid container in the scene, so we use scan_abstract to find the liquid container\n\nGenerate the MiniSpec program:", "completion": "_1=sa('Any liquid container here?');?_1!=False{g(_1)};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nwe use loop and probe to find vehicle\n\nGenerate the MiniSpec program:", "completion": "8{_1=p('Any vehicle target here?');?_1!=False{l(_1);->True}tc(45)}->False;"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nwe use loop and probe to find vehicle\n\nGenerate the MiniSpec program:", "completion": "8{_1=p('Any vehicle target here?');?_1!=False{l(_1);->True}tc(45)}->False;"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nFrom the scene, we can see a table, so we use scan to find a cat. Since cat is a medium object, we use 40cm as the distance\n\nGenerate the MiniSpec program:", "completion": "?s('cat')==True{g('cat');->True}->False;"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nFrom the scene, we can see a table, so we use scan to find a cat. Since cat is a medium object, we use 40cm as the distance\n\nGenerate the MiniSpec program:", "completion": "_1=s('cat');?_1==True{g('cat');->True}->False;"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nThe task is too vague, so we use log to output the advice\n\nGenerate the MiniSpec program:", "completion": "l('Please give me more information.');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nThe task is too vague, so we use log to output the advice\n\nGenerate the MiniSpec program:", "completion": "l('Please give me more information.');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nThere are two tables, the second one is closer to the cup, so we go to the second table\n\nGenerate the MiniSpec program:", "completion": "g('table');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nfrom the scene, we tell directly that the left bottle is the biggest bottle\n\nGenerate the MiniSpec program:", "completion": "g('bottle');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nfrom the scene, we tell directly that bottle_7 is the biggest bottle\n\nGenerate the MiniSpec program:", "completion": "g('bottle_7');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nUsing scan abstract to find the desk with a computer on it\n\nGenerate the MiniSpec program:", "completion": "_1=sa('Any desk with a computer on it?');?_1!=False{g(_1)};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nThere is a car in the scene, so we follow it for 12 seconds using simple goto and delay pattern, repeating every 0.2 seconds for smooth following\n\nGenerate the MiniSpec program:", "completion": "60{?time()>12{->True};g('car');d(0.2)}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nThe second table (on the right) is closer to the pen\n\nGenerate the MiniSpec program:", "completion": "l('the right table');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nGo forward, then turn 90 degrees to the right, finally go forward again.\n\nGenerate the MiniSpec program:", "completion": "mf(100);tc(90);mf(100);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nafter turning around, we will do replan. We found that the table is blocking the book, so we use moving_up to get over the table and then go to the book\n\nGenerate the MiniSpec program:", "completion": "mu(40);g('book');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nthere is a cup instance in the scene, so we go to it and use object_dis to get the distance and log to output the distance\n\nGenerate the MiniSpec program:", "completion": "g('cup');_2=od('cup');l(_2);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno furniture visible in the scene, so we scan for furniture and log the result\n\nGenerate the MiniSpec program:", "completion": "_1=p('Any furniture here?');?_1!=False{l('Yes');->True}l('No');->False;"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nthere is a phone in the scene, go to it, take a picture, then move left\n\nGenerate the MiniSpec program:", "completion": "g('phone');tp;ml(50);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nneed to compare sizes of fruits, orange_2 appears to be the smallest based on naming pattern\n\nGenerate the MiniSpec program:", "completion": "g('orange_2');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nbottle is in scene, go to it, take picture, then circle around it using turn and move commands\n\nGenerate the MiniSpec program:", "completion": "g('bottle');tp;4{tc(90);mf(50)}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno person in scene, scan for person, if found go to them and circle 3 times\n\nGenerate the MiniSpec program:", "completion": "_1=s('person');?_1==True{g('person');3{4{tc(90);mf(40)}}}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nthere is a cup in scene, so take picture of it\n\nGenerate the MiniSpec program:", "completion": "?iv('cup'){g('cup');tp}{g('book')}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\ncompare fruit sizes, apple appears larger, go to it and measure height\n\nGenerate the MiniSpec program:", "completion": "g('apple');_h=oh('apple');l(_h);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nchair is in scene, go to it, then scan around for table\n\nGenerate the MiniSpec program:", "completion": "g('chair');4{tc(90);_t=p('Any table here?');?_t!=False{l('Found table');->True}}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nobjects visible in scene, turn around scanning until something found, then go to it\n\nGenerate the MiniSpec program:", "completion": "12{_obj=p('Any object here?');?_obj!=False{g(_obj);->True}tc(30)}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nboth laptop and mouse are visible, visit laptop first then mouse\n\nGenerate the MiniSpec program:", "completion": "?iv('laptop')&iv('mouse'){g('laptop');g('mouse')}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nBall is in scene, follow it for 10 seconds using simple goto and delay pattern, repeating every 0.2 seconds for smooth following\n\nGenerate the MiniSpec program:", "completion": "50{?time()>10{->True};g('ball');d(0.2)}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\ncompare x positions, phone has higher x value so it's on the right\n\nGenerate the MiniSpec program:", "completion": "_px=ox('phone');_bx=ox('book');?_px>_bx{l('phone is on the right')}{l('book is on the right')}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nmove forward first, then check for objects and respond accordingly\n\nGenerate the MiniSpec program:", "completion": "mf(80);_obj=p('Any object here?');?_obj!=False{tp;mb(80)}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nbottle and cup are both containers, count them\n\nGenerate the MiniSpec program:", "completion": "_count=0;?iv('bottle'){_count=_count+1};?iv('cup'){_count=_count+1};l(_count);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\ncar is in scene, go to it and use probe to check if moving\n\nGenerate the MiniSpec program:", "completion": "g('car');_moving=p('Is this car moving?');l(_moving);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nvisit each apple object, take pictures, then visit orange\n\nGenerate the MiniSpec program:", "completion": "g('apple_1');tp;g('apple_2');tp;g('orange_5');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno animals in scene, scan for animal, if found follow for 5 seconds using simple goto and delay pattern, repeating every 0.2 seconds\n\nGenerate the MiniSpec program:", "completion": "_1=s('animal');?_1==True{25{g(_1);d(0.2)}}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\ncompare distances to determine which furniture is closer, then go to it\n\nGenerate the MiniSpec program:", "completion": "_cd=od('chair');_td=od('table');?_cd<_td{g('chair')}{g('table')}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nbottle is in scene, take picture, move up, take another picture\n\nGenerate the MiniSpec program:", "completion": "g('bottle');tp;mu(50);tp;"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nscan for red objects first, if not found then scan for blue objects\n\nGenerate the MiniSpec program:", "completion": "_red=sa('Any red object here?');?_red!=False{g(_red)}{_blue=sa('Any blue object here?');?_blue!=False{g(_blue)}}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\npen and pencil are both writing tools, go to one and measure width\n\nGenerate the MiniSpec program:", "completion": "g('pen');_w=ow('pen');l(_w);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\ndog is visible, circle around it twice then take picture\n\nGenerate the MiniSpec program:", "completion": "?iv('dog'){g('dog');2{4{tc(90);mf(40)}}tp}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\ncount the book objects visible in scene\n\nGenerate the MiniSpec program:", "completion": "_count=0;?iv('book_1'){_count=_count+1};?iv('book_2'){_count=_count+1};l(_count);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nexecute square movement pattern while checking for objects at each position\n\nGenerate the MiniSpec program:", "completion": "4{_obj=p('Any object here?');?_obj!=False{l('Found object at corner')}mf(60);tc(90)}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nlaptop is in scene, measure distance to it and report\n\nGenerate the MiniSpec program:", "completion": "_d=od('laptop');l(_d);g('laptop');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\ncup and plate are kitchen items, compare sizes and go to larger one\n\nGenerate the MiniSpec program:", "completion": "_cw=ow('cup');_ch=oh('cup');_pw=ow('plate');_ph=oh('plate');?(_cw*_ch)>(_pw*_ph){g('cup')}{g('plate')}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nBird is in scene, follow it gently for 8 seconds using simple goto and delay pattern, repeating every 0.2 seconds for gentle following\n\nGenerate the MiniSpec program:", "completion": "40{?time()>8{->True};g('bird');d(0.2)}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nphone and tablet are electronic devices, visit each and log findings\n\nGenerate the MiniSpec program:", "completion": "g('phone');l('Found phone');g('tablet');l('Found tablet');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple forward movement command\n\nGenerate the MiniSpec program:", "completion": "mf(50);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nApple is visible, move towards it\n\nGenerate the MiniSpec program:", "completion": "g('apple');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nConditional movement based on person detection\n\nGenerate the MiniSpec program:", "completion": "?s('person')==True{mf(60)}{tu(90)}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nCat is visible, go to it\n\nGenerate the MiniSpec program:", "completion": "g('cat');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSequential left and right movements\n\nGenerate the MiniSpec program:", "completion": "ml(30);mr(30);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nDoor is visible, move to it\n\nGenerate the MiniSpec program:", "completion": "g('door');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nTurn first, then move forward\n\nGenerate the MiniSpec program:", "completion": "tc(90);mf(50);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nBall is visible, conditional movement to it\n\nGenerate the MiniSpec program:", "completion": "?iv('ball'){g('ball')}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple upward movement\n\nGenerate the MiniSpec program:", "completion": "mu(40);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nPerson is visible, approach with slow movement\n\nGenerate the MiniSpec program:", "completion": "g('person');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nObjects are visible in scene, so no turn needed\n\nGenerate the MiniSpec program:", "completion": "?p('Any object here?')==False{tc(180)}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nCar is visible, go to it\n\nGenerate the MiniSpec program:", "completion": "g('car');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple downward movement\n\nGenerate the MiniSpec program:", "completion": "md(25);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSpecific bottle instance visible, go to it\n\nGenerate the MiniSpec program:", "completion": "g('bottle_3');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nTurn first, then conditional forward movement\n\nGenerate the MiniSpec program:", "completion": "tu(90);?p('Is path clear?')==True{mf(60)}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nTree is visible, move close to it\n\nGenerate the MiniSpec program:", "completion": "g('tree');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple backward movement\n\nGenerate the MiniSpec program:", "completion": "mb(35);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nDog_2 is visible, conditional movement\n\nGenerate the MiniSpec program:", "completion": "?iv('dog_2'){g('dog_2')}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\n180 degree turn followed by forward movement\n\nGenerate the MiniSpec program:", "completion": "tc(180);mf(50);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nBook is visible, move towards it\n\nGenerate the MiniSpec program:", "completion": "g('book');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nChair is visible in scene, so move to it\n\nGenerate the MiniSpec program:", "completion": "?s('chair')==True{g('chair')}{mr(50)}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSpecific phone instance visible\n\nGenerate the MiniSpec program:", "completion": "g('phone_5');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSequential forward movement and right turn\n\nGenerate the MiniSpec program:", "completion": "mf(45);tc(90);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nCup is visible, move close to it\n\nGenerate the MiniSpec program:", "completion": "g('cup');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nObjects are visible in scene, move towards one of them\n\nGenerate the MiniSpec program:", "completion": "_obj=p('Any object here?');?_obj!=False{g(_obj)}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSpecific table instance visible\n\nGenerate the MiniSpec program:", "completion": "g('table_7');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nTurn left then move upward\n\nGenerate the MiniSpec program:", "completion": "tu(45);mu(30);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nOrange is visible, conditional movement\n\nGenerate the MiniSpec program:", "completion": "?iv('orange'){g('orange')}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nMove right followed by 180 turn\n\nGenerate the MiniSpec program:", "completion": "mr(60);tc(180);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSpecific laptop instance visible\n\nGenerate the MiniSpec program:", "completion": "g('laptop_4');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nNo fruit visible in scene, so move back\n\nGenerate the MiniSpec program:", "completion": "?sa('Any fruit here?')!=False{mf(50)}{mb(50)}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nChair is visible, approach it\n\nGenerate the MiniSpec program:", "completion": "g('chair');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSequential downward and left movements\n\nGenerate the MiniSpec program:", "completion": "md(20);ml(40);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nBanana_6 is visible, conditional movement\n\nGenerate the MiniSpec program:", "completion": "?iv('banana_6'){g('banana_6')}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nRight turn followed by specific forward distance\n\nGenerate the MiniSpec program:", "completion": "tc(90);mf(70);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nPen is visible, go to it\n\nGenerate the MiniSpec program:", "completion": "g('pen');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nNo person visible in scene, so move up\n\nGenerate the MiniSpec program:", "completion": "?s('person')==False{mu(50)}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSpecific mouse instance visible\n\nGenerate the MiniSpec program:", "completion": "g('mouse_8');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSequential backward movement and left turn\n\nGenerate the MiniSpec program:", "completion": "mb(40);tu(90);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nBottle is visible, approach it\n\nGenerate the MiniSpec program:", "completion": "g('bottle');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nObjects are visible in scene, move to one of them\n\nGenerate the MiniSpec program:", "completion": "_obj=p('Any object here?');?_obj!=False{g(_obj)}{tc(180)}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSpecific keyboard instance visible\n\nGenerate the MiniSpec program:", "completion": "g('keyboard_3');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nUpward movement followed by forward movement\n\nGenerate the MiniSpec program:", "completion": "mu(30);mf(50);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nClock is visible, conditional movement\n\nGenerate the MiniSpec program:", "completion": "?iv('clock'){g('clock')}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\n180 turn followed by right movement\n\nGenerate the MiniSpec program:", "completion": "tc(180);mr(45);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSpecific plate instance visible\n\nGenerate the MiniSpec program:", "completion": "g('plate_9');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nFurniture (chair, table) is visible, so move forward\n\nGenerate the MiniSpec program:", "completion": "?sa('Any furniture here?')!=False{mf(60)}{md(30)}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nRemote is visible, go to it\n\nGenerate the MiniSpec program:", "completion": "g('remote');"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nLeft movement followed by right turn\n\nGenerate the MiniSpec program:", "completion": "ml(35);tc(90);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nTowel_1 is visible, conditional movement\n\nGenerate the MiniSpec program:", "completion": "?iv('towel_1'){g('towel_1')}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nPerson is visible, follow them with continuous replanning for movement tracking\n\nGenerate the MiniSpec program:", "completion": "g('person');50{?time()>10{->True};_1=ox('person');?_1>0.55{tc(15)};?_1<0.45{tu(15)};d(0.2)}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nScan for furniture, take photo, then replan to continue searching\n\nGenerate the MiniSpec program:", "completion": "_1=sa('Any furniture here?');?_1!=False{g(_1);tp;->True};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nPerson photography with regular intervals requires continuous replanning\n\nGenerate the MiniSpec program:", "completion": "g('person_3');20{tp;d(3);->True}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nFind containers, photograph with delays, replan to continue\n\nGenerate the MiniSpec program:", "completion": "g('bottle_7');tp;d(2);_1=sa('Any other container here?');?_1!=False{g(_1);tp;->True};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nApple is visible, go to it and take a single photograph\n\nGenerate the MiniSpec program:", "completion": "g('apple_4');tp;"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nAnimal following requires continuous replanning for tracking movement\n\nGenerate the MiniSpec program:", "completion": "g('cat_2');75{?time()>15{->True};_1=ox('cat_2');?_1>0.55{tc(15)};?_1<0.45{tu(15)};d(0.2)}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nContinuous monitoring with photography requires frequent replanning\n\nGenerate the MiniSpec program:", "completion": "g('dog_6');30{_1=ox('dog_6');_2=oy('dog_6');tp;d(2);->True}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nPerson following with regular photography requires continuous replanning\n\nGenerate the MiniSpec program:", "completion": "g('person_7');25{_1=ox('person_7');?_1>0.6{tc(20)};?_1<0.4{tu(20)};tp;d(3);->True}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nBall tracking with regular photography requires continuous replanning\n\nGenerate the MiniSpec program:", "completion": "g('ball_8');20{_x=ox('ball_8');_y=oy('ball_8');tp;d(4);->True}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\napple is visible, first move up to get better angle, then follow it for 25 seconds using goto and delay pattern\n\nGenerate the MiniSpec program:", "completion": "mu(40);125{g('apple');d(0.2)} ##"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nprobe the environment to identify and describe furniture types present\n\nGenerate the MiniSpec program:", "completion": "_furniture=p('What types of furniture are in this room?');l(_furniture); ##"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nscan for liquid containers first, then follow any found container for 30 seconds\n\nGenerate the MiniSpec program:", "completion": "_1=sa('Any liquid container here?');?_1!=False{150{g(_1);d(0.2)}} ##"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\ncat is visible, follow it for 30 seconds using goto and delay pattern\n\nGenerate the MiniSpec program:", "completion": "150{g('cat');d(0.2)} ##"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nturn around to look behind, then use scan_abstract to find any animal since animals are abstract concept, then follow for 20 seconds\n\nGenerate the MiniSpec program:", "completion": "tc(180);_1=sa('Any animal here?');?_1!=False{100{g(_1);d(0.2)}} ##"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nprobe the environment to detect any moving objects and report findings\n\nGenerate the MiniSpec program:", "completion": "_moving=p('Is anything moving or in motion in this area?');l(_moving); ##"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nturn left to change perspective, then scan for person and follow for 35 seconds since person is visible\n\nGenerate the MiniSpec program:", "completion": "tu(90);_1=s('person');?_1==True{175{g(_1);d(0.2)}} ##"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\ncup is visible, follow it for 30 seconds using goto and delay pattern\n\nGenerate the MiniSpec program:", "completion": "150{g('cup');d(0.2)} ##"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nmove backward to get better perspective, then follow the visible book for 5 seconds using goto and delay pattern\n\nGenerate the MiniSpec program:", "completion": "mb(30);25{g('book');d(0.2)} ##"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nbird is visible, follow it for 30 seconds using goto and delay pattern\n\nGenerate the MiniSpec program:", "completion": "150{g('bird');d(0.2)} ##"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nturn right to change perspective, then follow the visible phone for 6 seconds\n\nGenerate the MiniSpec program:", "completion": "tc(90);30{g('phone');d(0.2)} ##"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nscan abstractly for vehicles since vehicles are abstract concept, and describe what is found\n\nGenerate the MiniSpec program:", "completion": "_vehicle=sa('Any vehicles or transportation here?');?_vehicle!=False{l(_vehicle)}{l('No vehicles detected')} ##"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nmove up to get better angle, then follow the visible orange for 18 seconds using goto and delay pattern\n\nGenerate the MiniSpec program:", "completion": "mu(50);90{g('orange');d(0.2)} ##"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nmouse is visible, follow it for 30 seconds using goto and delay pattern\n\nGenerate the MiniSpec program:", "completion": "150{g('mouse');d(0.2)} ##"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nscan abstractly for electronic devices since electronics are abstract concept, then follow for 42 seconds\n\nGenerate the MiniSpec program:", "completion": "_1=sa('Any electronic device here?');?_1!=False{210{g(_1);d(0.2)}} ##"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nplate is visible, follow it for 30 seconds using goto and delay pattern\n\nGenerate the MiniSpec program:", "completion": "150{g('plate');d(0.2)} ##"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nmove down to change altitude perspective, then follow the visible bottle for 28 seconds\n\nGenerate the MiniSpec program:", "completion": "md(40);140{g('bottle');d(0.2)} ##"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nscan abstractly for tools since tools are abstract concept, and describe any found\n\nGenerate the MiniSpec program:", "completion": "_tools=sa('Any tools or equipment here?');?_tools!=False{l(_tools)}{l('No tools detected')} ##"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nmove left to get better angle, then follow the visible pen for 6 seconds using goto and delay pattern\n\nGenerate the MiniSpec program:", "completion": "ml(45);30{g('pen');d(0.2)} ##"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nprobe the environment to detect and report any activities or movements happening\n\nGenerate the MiniSpec program:", "completion": "_activity=p('What activities or movements are happening here?');l(_activity); ##"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nscan abstractly for input devices since input devices are abstract concept, then follow for 15 seconds\n\nGenerate the MiniSpec program:", "completion": "_1=sa('Any input device here?');?_1!=False{75{g(_1);d(0.2)}} ##"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\ntowel is visible, follow it for 30 seconds using goto and delay pattern\n\nGenerate the MiniSpec program:", "completion": "150{g('towel');d(0.2)} ##"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nmove right to change position, then follow the visible vase for 9 seconds using goto and delay pattern\n\nGenerate the MiniSpec program:", "completion": "mr(50);45{g('vase');d(0.2)} ##"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nscan abstractly for storage containers since storage is abstract concept, and describe what is found\n\nGenerate the MiniSpec program:", "completion": "_storage=sa('Any storage containers or organizers here?');?_storage!=False{l(_storage)}{l('No storage containers detected')} ##"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nmove forward to get closer, then follow the visible shoes for 45 seconds using goto and delay pattern\n\nGenerate the MiniSpec program:", "completion": "mf(60);225{g('shoes');d(0.2)}"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno laptop instance in the scene, so we use scan to find laptop\n\nGenerate the MiniSpec program:", "completion": "?s('laptop')==True{g('laptop')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple directional command - turn left then move forward, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "tu(90);mf(50);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno dog instance in the scene, so we use scan to find dog\n\nGenerate the MiniSpec program:", "completion": "?s('dog')==True{g('dog')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple backward movement command, ignoring all visible objects including fruits\n\nGenerate the MiniSpec program:", "completion": "mb(50);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno bird instance in the scene, so we use scan to find bird\n\nGenerate the MiniSpec program:", "completion": "?s('bird')==True{g('bird')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple turn around command (180 degrees), ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "tc(180);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno bottle instance in the scene, so we use scan to find bottle\n\nGenerate the MiniSpec program:", "completion": "?s('bottle')==True{g('bottle')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple upward movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "mu(40);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno cat instance in the scene, so we use scan to find cat\n\nGenerate the MiniSpec program:", "completion": "?s('cat')==True{g('cat')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple forward movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "mf(60);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nfood is abstract and there is no food in the scene, so we use scan_abstract to find food\n\nGenerate the MiniSpec program:", "completion": "_1=sa('Any food here?');?_1!=False{g(_1)};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple right turn command, ignoring all visible objects including animals\n\nGenerate the MiniSpec program:", "completion": "tc(90);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno cup instance in the scene, so we use scan to find cup\n\nGenerate the MiniSpec program:", "completion": "?s('cup')==True{g('cup')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple downward movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "md(30);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno phone instance in the scene, so we use scan to find phone\n\nGenerate the MiniSpec program:", "completion": "?s('phone')==True{g('phone')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple left movement command, ignoring all visible objects including containers\n\nGenerate the MiniSpec program:", "completion": "ml(45);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno pen instance in the scene, so we use scan to find pen\n\nGenerate the MiniSpec program:", "completion": "?s('pen')==True{g('pen')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple left turn command, ignoring all visible objects including person\n\nGenerate the MiniSpec program:", "completion": "tu(90);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno book instance in the scene, so we use scan to find book\n\nGenerate the MiniSpec program:", "completion": "?s('book')==True{g('book')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple right movement command, ignoring all visible objects including the apple\n\nGenerate the MiniSpec program:", "completion": "mr(50);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\ntool is abstract and there is no tool in the scene, so we use scan_abstract to find tools\n\nGenerate the MiniSpec program:", "completion": "_1=sa('Any tool here?');?_1!=False{g(_1)};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple backward movement command, ignoring all visible objects including animals\n\nGenerate the MiniSpec program:", "completion": "mb(60);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno lamp instance in the scene, so we use scan to find lamp\n\nGenerate the MiniSpec program:", "completion": "?s('lamp')==True{g('lamp')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple turn around command (180 degrees), ignoring all visible electronics\n\nGenerate the MiniSpec program:", "completion": "tc(180);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno ball instance in the scene, so we use scan to find ball\n\nGenerate the MiniSpec program:", "completion": "?s('ball')==True{g('ball')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno mouse instance in the scene, so we use scan to find mouse, then go and use object_width to get the width and log to output the width, finally use picture to take a picture\n\nGenerate the MiniSpec program:", "completion": "?s('mouse')==True{g('mouse');_2=ow('mouse');l(_2);tp};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple upward movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "mu(40);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno bottle instance in the scene, so we use scan to find bottle\n\nGenerate the MiniSpec program:", "completion": "?s('bottle')==True{g('bottle')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple forward movement command, ignoring all visible objects including fruits\n\nGenerate the MiniSpec program:", "completion": "mf(50);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno chair instance in the scene, so we use scan to find chair\n\nGenerate the MiniSpec program:", "completion": "?s('chair')==True{g('chair')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple right turn command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "tc(90);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno dog instance in the scene, so we use scan to find dog\n\nGenerate the MiniSpec program:", "completion": "?s('dog')==True{g('dog')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple downward movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "md(35);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno apple instance in the scene, so we use scan to find apple\n\nGenerate the MiniSpec program:", "completion": "?s('apple')==True{g('apple')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple left turn command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "tu(90);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nanimal is abstract and there is no animal in the scene, so we use scan_abstract to find animals\n\nGenerate the MiniSpec program:", "completion": "_1=sa('Any animal here?');?_1!=False{g(_1)};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple backward movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "mb(45);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno cup instance in the scene, so we use scan to find cup\n\nGenerate the MiniSpec program:", "completion": "?s('cup')==True{g('cup')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple right movement command, ignoring all visible objects including chairs\n\nGenerate the MiniSpec program:", "completion": "mr(40);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno book instance in the scene, so we use scan to find book\n\nGenerate the MiniSpec program:", "completion": "?s('book')==True{g('book')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple turn around command (180 degrees), ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "tc(180);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno chair instance in the scene, so we use scan to find chair\n\nGenerate the MiniSpec program:", "completion": "?s('chair')==True{g('chair')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple upward movement command, ignoring all visible objects including bottles\n\nGenerate the MiniSpec program:", "completion": "mu(50);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno pen instance in the scene, so we use scan to find pen\n\nGenerate the MiniSpec program:", "completion": "?s('pen')==True{g('pen')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple left movement command, ignoring all visible objects including the tennis ball\n\nGenerate the MiniSpec program:", "completion": "ml(50);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno cup instance in the scene, so we use scan to find cup\n\nGenerate the MiniSpec program:", "completion": "?s('cup')==True{g('cup')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple forward movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "mf(60);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno bottle instance in the scene, so we use scan to find bottle\n\nGenerate the MiniSpec program:", "completion": "?s('bottle')==True{g('bottle')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple right turn command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "tc(90);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno mouse instance in the scene, so we use scan to find mouse\n\nGenerate the MiniSpec program:", "completion": "?s('mouse')==True{g('mouse')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple downward movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "md(40);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno bottle instance in the scene, so we use scan to find bottle\n\nGenerate the MiniSpec program:", "completion": "?s('bottle')==True{g('bottle')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple left turn command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "tu(90);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno dog instance in the scene, so we use scan to find dog\n\nGenerate the MiniSpec program:", "completion": "?s('dog')==True{g('dog')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple backward movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "mb(55);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno cat instance in the scene, so we use scan to find cat\n\nGenerate the MiniSpec program:", "completion": "?s('cat')==True{g('cat')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple upward movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "mu(45);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno ball instance in the scene, so we use scan to find ball\n\nGenerate the MiniSpec program:", "completion": "?s('ball')==True{g('ball')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple turn around command (180 degrees), ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "tc(180);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno mouse instance in the scene, so we use scan to find mouse\n\nGenerate the MiniSpec program:", "completion": "?s('mouse')==True{g('mouse')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple right movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "mr(50);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno pen instance in the scene, so we use scan to find pen\n\nGenerate the MiniSpec program:", "completion": "?s('pen')==True{g('pen')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple left movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "ml(45);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno bottle instance in the scene, so we use scan to find bottle\n\nGenerate the MiniSpec program:", "completion": "?s('bottle')==True{g('bottle')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple right turn command, ignoring all visible objects including cups\n\nGenerate the MiniSpec program:", "completion": "tc(90);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno book instance in the scene, so we use scan to find book\n\nGenerate the MiniSpec program:", "completion": "?s('book')==True{g('book')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple forward movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "mf(60);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno ball instance in the scene, so we use scan to find ball\n\nGenerate the MiniSpec program:", "completion": "?s('ball')==True{g('ball')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple backward movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "mb(50);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno dog instance in the scene, so we use scan to find dog\n\nGenerate the MiniSpec program:", "completion": "?s('dog')==True{g('dog')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple left turn command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "tu(90);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno cup instance in the scene, so we use scan to find cup\n\nGenerate the MiniSpec program:", "completion": "?s('cup')==True{g('cup')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple upward movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "mu(40);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno mouse instance in the scene, so we use scan to find mouse\n\nGenerate the MiniSpec program:", "completion": "?s('mouse')==True{g('mouse')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple forward movement command, ignoring all visible objects including fruits\n\nGenerate the MiniSpec program:", "completion": "mf(60);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno pen instance in the scene, so we use scan to find pen\n\nGenerate the MiniSpec program:", "completion": "?s('pen')==True{g('pen')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple turn around command (180 degrees), ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "tc(180);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno cup instance in the scene, so we use scan to find cup\n\nGenerate the MiniSpec program:", "completion": "?s('cup')==True{g('cup')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple right movement command, ignoring all visible objects including fruits\n\nGenerate the MiniSpec program:", "completion": "mr(50);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno bottle instance in the scene, so we use scan to find bottle\n\nGenerate the MiniSpec program:", "completion": "?s('bottle')==True{g('bottle')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple downward movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "md(40);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno pen instance in the scene, so we use scan to find pen\n\nGenerate the MiniSpec program:", "completion": "?s('pen')==True{g('pen')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple left turn command, ignoring all visible objects including fruit\n\nGenerate the MiniSpec program:", "completion": "tu(90);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno mouse instance in the scene, so we use scan to find mouse\n\nGenerate the MiniSpec program:", "completion": "?s('mouse')==True{g('mouse')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple backward movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "mb(50);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno ball instance in the scene, so we use scan to find ball\n\nGenerate the MiniSpec program:", "completion": "?s('ball')==True{g('ball')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple forward movement command, ignoring all visible objects including truck\n\nGenerate the MiniSpec program:", "completion": "mf(60);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno bottle instance in the scene, so we use scan to find bottle\n\nGenerate the MiniSpec program:", "completion": "?s('bottle')==True{g('bottle')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple right turn command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "tc(90);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno cup instance in the scene, so we use scan to find cup\n\nGenerate the MiniSpec program:", "completion": "?s('cup')==True{g('cup')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple upward movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "mu(50);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno ball instance in the scene, so we use scan to find ball\n\nGenerate the MiniSpec program:", "completion": "?s('ball')==True{g('ball')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple left movement command, ignoring all visible objects including writing tools\n\nGenerate the MiniSpec program:", "completion": "ml(45);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno bottle instance in the scene, so we use scan to find bottle\n\nGenerate the MiniSpec program:", "completion": "?s('bottle')==True{g('bottle')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple turn around command (180 degrees), ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "tc(180);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno mouse instance in the scene, so we use scan to find mouse\n\nGenerate the MiniSpec program:", "completion": "?s('mouse')==True{g('mouse')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple right movement command, ignoring all visible objects including phone\n\nGenerate the MiniSpec program:", "completion": "mr(50);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno pen instance in the scene, so we use scan to find pen\n\nGenerate the MiniSpec program:", "completion": "?s('pen')==True{g('pen')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple left turn command, ignoring all visible objects including fish\n\nGenerate the MiniSpec program:", "completion": "tu(90);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno bottle instance in the scene, so we use scan to find bottle\n\nGenerate the MiniSpec program:", "completion": "?s('bottle')==True{g('bottle')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple forward movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "mf(60);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno cup instance in the scene, so we use scan to find cup\n\nGenerate the MiniSpec program:", "completion": "?s('cup')==True{g('cup')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple backward movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "mb(50);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno ball instance in the scene, so we use scan to find ball\n\nGenerate the MiniSpec program:", "completion": "?s('ball')==True{g('ball')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple right turn command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "tc(90);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno pen instance in the scene, so we use scan to find pen\n\nGenerate the MiniSpec program:", "completion": "?s('pen')==True{g('pen')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple upward movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "mu(50);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno mouse instance in the scene, so we use scan to find mouse\n\nGenerate the MiniSpec program:", "completion": "?s('mouse')==True{g('mouse')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple left movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "ml(45);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno bottle instance in the scene, so we use scan to find bottle\n\nGenerate the MiniSpec program:", "completion": "?s('bottle')==True{g('bottle')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple turn around command (180 degrees), ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "tc(180);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno cup instance in the scene, so we use scan to find cup\n\nGenerate the MiniSpec program:", "completion": "?s('cup')==True{g('cup')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple downward movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "md(40);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno pen instance in the scene, so we use scan to find pen\n\nGenerate the MiniSpec program:", "completion": "?s('pen')==True{g('pen')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple forward movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "mf(60);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno ball instance in the scene, so we use scan to find ball\n\nGenerate the MiniSpec program:", "completion": "?s('ball')==True{g('ball')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple left turn command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "tu(90);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno bottle instance in the scene, so we use scan to find bottle\n\nGenerate the MiniSpec program:", "completion": "?s('bottle')==True{g('bottle')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple right movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "mr(50);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno pen instance in the scene, so we use scan to find pen\n\nGenerate the MiniSpec program:", "completion": "?s('pen')==True{g('pen')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple upward movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "mu(50);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno bottle instance in the scene, so we use scan to find bottle\n\nGenerate the MiniSpec program:", "completion": "?s('bottle')==True{g('bottle')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple left turn command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "tu(90);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno pen instance in the scene, so we use scan to find pen\n\nGenerate the MiniSpec program:", "completion": "?s('pen')==True{g('pen')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple backward movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "mb(50);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno dog instance in the scene, so we use scan to find dog\n\nGenerate the MiniSpec program:", "completion": "?s('dog')==True{g('dog')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple forward movement command, ignoring all visible objects including person\n\nGenerate the MiniSpec program:", "completion": "mf(60);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno cup instance in the scene, so we use scan to find cup\n\nGenerate the MiniSpec program:", "completion": "?s('cup')==True{g('cup')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple right turn command, ignoring all visible objects including cat\n\nGenerate the MiniSpec program:", "completion": "tc(90);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno ball instance in the scene, so we use scan to find ball\n\nGenerate the MiniSpec program:", "completion": "?s('ball')==True{g('ball')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple upward movement command, ignoring all visible objects including ball\n\nGenerate the MiniSpec program:", "completion": "mu(40);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno cup instance in the scene, so we use scan to find cup\n\nGenerate the MiniSpec program:", "completion": "?s('cup')==True{g('cup')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple turn around command (180 degrees), ignoring all visible objects including cup\n\nGenerate the MiniSpec program:", "completion": "tc(180);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno pen instance in the scene, so we use scan to find pen\n\nGenerate the MiniSpec program:", "completion": "?s('pen')==True{g('pen')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple left movement command, ignoring all visible objects including bird\n\nGenerate the MiniSpec program:", "completion": "ml(50);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno bottle instance in the scene, so we use scan to find bottle\n\nGenerate the MiniSpec program:", "completion": "?s('bottle')==True{g('bottle')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple downward movement command, ignoring all visible objects including car\n\nGenerate the MiniSpec program:", "completion": "md(40);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno mouse instance in the scene, so we use scan to find mouse\n\nGenerate the MiniSpec program:", "completion": "?s('mouse')==True{g('mouse')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple left turn command, ignoring all visible objects including mouse\n\nGenerate the MiniSpec program:", "completion": "tu(90);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno cup instance in the scene, so we use scan to find cup\n\nGenerate the MiniSpec program:", "completion": "?s('cup')==True{g('cup')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple right movement command, ignoring all visible objects including plate\n\nGenerate the MiniSpec program:", "completion": "mr(50);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno pen instance in the scene, so we use scan to find pen\n\nGenerate the MiniSpec program:", "completion": "?s('pen')==True{g('pen')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple backward movement command, ignoring all visible objects including clock\n\nGenerate the MiniSpec program:", "completion": "mb(50);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno ball instance in the scene, so we use scan to find ball\n\nGenerate the MiniSpec program:", "completion": "?s('ball')==True{g('ball')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple right turn command, ignoring all visible objects including remote\n\nGenerate the MiniSpec program:", "completion": "tc(90);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno cup instance in the scene, so we use scan to find cup\n\nGenerate the MiniSpec program:", "completion": "?s('cup')==True{g('cup')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple forward movement command, ignoring all visible objects including towel\n\nGenerate the MiniSpec program:", "completion": "mf(60);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno ball instance in the scene, so we use scan to find ball\n\nGenerate the MiniSpec program:", "completion": "?s('ball')==True{g('ball')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple turn around command (180 degrees), ignoring all visible objects including wallet\n\nGenerate the MiniSpec program:", "completion": "tc(180);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno pen instance in the scene, so we use scan to find pen\n\nGenerate the MiniSpec program:", "completion": "?s('pen')==True{g('pen')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple upward movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "mu(50);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno bottle instance in the scene, so we use scan to find bottle\n\nGenerate the MiniSpec program:", "completion": "?s('bottle')==True{g('bottle')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple left turn command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "tu(90);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno mouse instance in the scene, so we use scan to find mouse\n\nGenerate the MiniSpec program:", "completion": "?s('mouse')==True{g('mouse')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple right movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "mr(50);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno ball instance in the scene, so we use scan to find ball\n\nGenerate the MiniSpec program:", "completion": "?s('ball')==True{g('ball')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple downward movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "md(40);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno pen instance in the scene, so we use scan to find pen\n\nGenerate the MiniSpec program:", "completion": "?s('pen')==True{g('pen')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple right turn command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "tc(90);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno cup instance in the scene, so we use scan to find cup\n\nGenerate the MiniSpec program:", "completion": "?s('cup')==True{g('cup')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple backward movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "mb(50);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno mouse instance in the scene, so we use scan to find mouse\n\nGenerate the MiniSpec program:", "completion": "?s('mouse')==True{g('mouse')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple left movement command, ignoring all visible objects including car\n\nGenerate the MiniSpec program:", "completion": "ml(50);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno ball instance in the scene, so we use scan to find ball\n\nGenerate the MiniSpec program:", "completion": "?s('ball')==True{g('ball')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple forward movement command, ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "mf(60);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno bottle instance in the scene, so we use scan to find bottle\n\nGenerate the MiniSpec program:", "completion": "?s('bottle')==True{g('bottle')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple turn around command (180 degrees), ignoring all visible objects\n\nGenerate the MiniSpec program:", "completion": "tc(180);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno pen instance in the scene, so we use scan to find pen\n\nGenerate the MiniSpec program:", "completion": "?s('pen')==True{g('pen')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple upward movement command, ignoring all visible objects including remote\n\nGenerate the MiniSpec program:", "completion": "mu(40);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno cup instance in the scene, so we use scan to find cup\n\nGenerate the MiniSpec program:", "completion": "?s('cup')==True{g('cup')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple downward movement command, ignoring all visible objects including clock\n\nGenerate the MiniSpec program:", "completion": "md(40);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno mouse instance in the scene, so we use scan to find mouse\n\nGenerate the MiniSpec program:", "completion": "?s('mouse')==True{g('mouse')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple right turn command, ignoring all visible objects including pen\n\nGenerate the MiniSpec program:", "completion": "tc(90);"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nno ball instance in the scene, so we use scan to find ball\n\nGenerate the MiniSpec program:", "completion": "?s('ball')==True{g('ball')};"}
{"prompt": "You are a MiniSpec code generator. Given reasoning about a robot task, generate the appropriate MiniSpec program to execute the plan.\n\n## Available Skills\nHigh-level skills:\ns (scan): Rotate to find object when not in current scene\nsa (scan_abstract): Rotate to find abstract object by description when not in current scene\n\nLow-level skills:\nMovement: mf (move_forward), mb (move_backward), ml (move_left), mr (move_right), mu (move_up), md (move_down)\nRotation: tc (turn_cw), tu (turn_ccw)\nUtilities: d (delay), tp (take_picture), rp (re_plan), t (time)\nVision: iv (is_visible), ox (object_x), oy (object_y), ow (object_width), oh (object_height), od (object_dis)\nLogic: p (probe), l (log), g (goto)\n\n## Rules\n- Use high-level skills when available\n- Invoke skills using their short names\n- If a skill has no arguments, call it without parentheses\n- Generate response as a single MiniSpec program sentence\n- All statements must end with ;\n- Conditionals must start with ? - Format: ?condition{statements};\n- Use single quotes for string arguments: s('object')\n\n## Reasoning Input\nSimple right movement command, ignoring all visible objects including bottle\n\nGenerate the MiniSpec program:", "completion": "mr(50);"}
